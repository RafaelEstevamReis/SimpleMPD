<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simple.MPD</name>
    </assembly>
    <members>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Database">
            <summary>
            the song database has been modified after update
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Update">
            <summary>
            a database update has started or finished. 
            If the database was modified during the update, the database event is also emitted.
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Stored_Playlist">
            <summary>
            a stored playlist has been modified, renamed, created or deleted
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Playlist">
            <summary>
            the queue (i.e. the current playlist) has been modified
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Player">
            <summary>
            the player has been started, stopped or seeked or tags of the currently playing song have changed (e.g. received from stream)
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Mixer">
            <summary>
            the volume has been changed
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Output">
            <summary>
            an audio output has been added, removed or modified (e.g. renamed, enabled or disabled)
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Options">
            <summary>
            options like repeat, random, crossfade, replay gain
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Partition">
            <summary>
            a partition was added, removed or changed
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Sticker">
            <summary>
            the sticker database has been modified.
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Subscription">
            <summary>
            a client has subscribed or unsubscribed to a channel
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Message">
            <summary>
            a message was received on a channel this client is subscribed to; this event is only emitted when the queue is empty
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Neighbor">
            <summary>
            a neighbor was found or lost
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Mount">
            <summary>
            the mount list has changed
            </summary>
        </member>
        <member name="T:Simple.MPD.FilterMatch">
            <summary>
            Filter match for 'find'-like Expressions
            </summary>
        </member>
        <member name="F:Simple.MPD.FilterMatch.Equals">
            <summary>
            Compiles to '=='
            </summary>
        </member>
        <member name="F:Simple.MPD.FilterMatch.Different">
            <summary>
            Compiles to '!='
            </summary>
        </member>
        <member name="F:Simple.MPD.FilterMatch.Contains">
            <summary>
            Compiles to 'contains'
            </summary>
        </member>
        <member name="T:Simple.MPD.MPD">
            <summary>
            Music Protocol Deamon client
            </summary>
        </member>
        <member name="P:Simple.MPD.MPD.IsIdle">
            <summary>
            Reports if is in Idle.
            Do NOT send commands while in Idle
            </summary>
        </member>
        <member name="P:Simple.MPD.MPD.Connection">
            <summary>
            Gets current connection
            </summary>
        </member>
        <member name="P:Simple.MPD.MPD.ProtocolVersion">
            <summary>
            Current protocol version
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.#ctor(Simple.MPD.Interfaces.IConnection)">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.ExecuteCommandAsync(Simple.MPD.Interfaces.ICommand)">
            <summary>
            Executes a command in a concurrent-safe manmer
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.CloseConnection">
            <summary>
            Closes the scoket
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.DoPingAsync">
            <summary>
            Executes a Ping command
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetConfigAsync">
            <summary>
            Dumps configuration values that may be interesting for the client. 
            This command is only permitted to “local” clients (connected via local socket).
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetCommandsAsync">
            <summary>
            Shows which commands the current user has access to
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetNotCommandsAsync">
            <summary>
            Shows which commands the current user does not have access to
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetUrlHandlersAsync">
            <summary>
            Gets a list of available URL handlers
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetDecodersAsync">
            <summary>
            Print a list of decoder plugins, followed by their supported suffixes and MIME types
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetStatsAsync">
            <summary>
            Displays statistics
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetStatusAsync">
            <summary>
            Reports the current status of the player and the volume level
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetCurrentSongAsync">
            <summary>
            Displays the song info of the current song
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Idle(System.Threading.CancellationToken)">
            <summary>
            Waits until there is a noteworthy change in one or more of MPD’s subsystems. 
            As soon as there is one, it lists all changed systems in a line in the format `changed: SUBSYSTEM`
            Any command sent while in Idle wil raise an IdleException
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SetConsumeAsync(System.Boolean)">
            <summary>
            Sets consume state. When consume is activated, each song played is removed from playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SetCrossfadeAsync(System.Int32)">
            <summary>
            Sets crossfading between songs
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SetRandomAsync(System.Boolean)">
            <summary>
            Enables/disables Random
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SetRepeatAsync(System.Boolean)">
            <summary>
            Enable/Disable repeat
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SetSingle(Simple.MPD.Commands.Single.States)">
            <summary>
            Sets single state, STATE should be On, Off or OneShot. 
            When single is activated, playback is stopped after current song, or song is repeated if the ‘repeat’ mode is enabled
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SetVolumeAsync(System.Int32)">
            <summary>
            Sets volume, the range of volume is 0-100. Out of range values will be truncated
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.PlayAsync">
            <summary>
            Begins playing the playlist at current song
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.PlaySongPosAsync(System.Int32)">
            <summary>
            Begins playing the playlist at song number SongPosition
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.PlaySongIdAsync(System.Int32)">
            <summary>
            Begins playing the playlist at song SongId
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.PauseAsync(Simple.MPD.Commands.Pause.State)">
            <summary>
            Pause or resume playback
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.NextAsync">
            <summary>
            Plays next song in the playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.PreviousAsync">
            <summary>
            Plays previous song in the playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.StopAsync">
            <summary>
            Stops playing
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetQueue">
            <summary>
            Displays a list of all songs in the queue, internally uses the `playlistinfo` command
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.QueueClear">
            <summary>
            Clears the queue
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.QueueAdd(System.String)">
            <summary>
            Adds the file URI to the playlist (directories add recursively). URI can also be a single file.
            Clients that are connected via local socket may add arbitrary local files(URI is an absolute path)
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.QueueAddId(System.String,System.Int32)">
            <summary>
            Adds a song to the playlist (non-recursive) and returns the song id. URI is always a single file or URL
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.QueueDelete(System.String)">
            <summary>
            Deletes a song from the playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.QueueDeleteId(System.String)">
            <summary>
            Deletes the song SONGID from the playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Shuffle">
            <summary>
            Shuffles the queue
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.ListAll">
            <summary>
            Do not use this command.
            Lists all songs and directories in URI.
            Do not manage a client-side copy of MPD’s database. 
            That is fragile and adds huge overhead. It will break with large databases. 
            Instead, query MPD whenever you need something.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simple.MPD.MPD.LsInfo(System.String)">
            <summary>
            Lists the contents of the directory URI
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Find(System.String)">
            <summary>
            Search the database for songs matching expression (case-sensitive)
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Find(Simple.MPD.Tags,Simple.MPD.FilterMatch,System.String)">
            <summary>
            Search the database for songs matching expression (case-sensitive)
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Search(System.String)">
            <summary>
            Search the database for songs matching expression (case-INsensitive)
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Search(Simple.MPD.Tags,Simple.MPD.FilterMatch,System.String)">
            <summary>
            Search the database for songs matching expression (case-INsensitive)
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.AddLocalM3uFile(System.String)">
            <summary>
            Rerads a Local m3u file with MPD music locations and adds to queue
            </summary>
            <param name="LocalFilePath">Local file, NOT MPD path</param>
            <returns>Tup´le with MPD file added and it's SongID</returns>
        </member>
        <member name="T:Simple.MPD.MpdNotifier">
            <summary>
            Creates a MPD-Client connection and notifies events
            </summary>
        </member>
        <member name="E:Simple.MPD.MpdNotifier.NotifyEvent">
            <summary>
            Notify on SubSystems change
            </summary>
        </member>
        <member name="E:Simple.MPD.MpdNotifier.NotifyStatusChange">
            <summary>
            Notify on Player, Mixer or Options
            </summary>
        </member>
        <member name="M:Simple.MPD.MpdNotifier.#ctor(Simple.MPD.Interfaces.IConnection)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.MpdNotifier.Start">
            <summary>
            Starts notifier
            </summary>
        </member>
        <member name="M:Simple.MPD.MpdNotifier.Stop">
            <summary>
            Stops notifier
            </summary>
        </member>
        <member name="M:Simple.MPD.MpdNotifier.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.Uptime">
            <summary>
            daemon uptime in seconds
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.PlayTime">
            <summary>
            time length of music played
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.Artists">
            <summary>
            number of artists
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.Albums">
            <summary>
            number of albums
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.Songs">
            <summary>
            number of songs
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.DB_PlayTime">
            <summary>
            sum of all song times in the database in seconds
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.DB_Update">
            <summary>
            last db update
            </summary>
        </member>
    </members>
</doc>

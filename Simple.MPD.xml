<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simple.MPD</name>
    </assembly>
    <members>
        <member name="T:Simple.MPD.Commands.Range">
            <summary>
            Represents a range of songs or entries
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Range.Start">
            <summary>
            First entry
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Range.End">
            <summary>
            End of the range, NOT included
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Range.ToString">
            <summary>
            Prints the format "START:END"
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Ping">
            <summary>
            Executes "Ping"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Ping.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Ping.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Ping.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Find">
            <summary>
            Executes "Find"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Find.Expression">
            <summary>
            Expression to search/filter
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Find.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Find.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Find.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Find.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Find.ExpressionBuilder(Simple.MPD.Tags,Simple.MPD.FilterMatch,System.String)">
            <summary>
            Builds an filter Expression
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.ListAll">
            <summary>
            Executes "ListAll" - avoid using this command
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.ListAll.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.ListAll.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.ListAll.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.LsInfo">
            <summary>
            Executes "LsInfo"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.LsInfo.Uri">
            <summary>
            Uri to list
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.LsInfo.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.LsInfo.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.LsInfo.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.LsInfo.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Search">
            <summary>
            Executes "Search"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Search.Expression">
            <summary>
            Expression to search/filter
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Search.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Search.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Search.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Search.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Consume">
            <summary>
            Executes "Consume"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Consume.ConsumeSong">
            <summary>
            Comsume song mode value
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Consume.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Consume.#ctor(System.Boolean)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Consume.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Consume.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Crossfade">
            <summary>
            Executes "Crossfade"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Crossfade.XFade">
            <summary>
            Crossfade value in seconds
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Crossfade.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Crossfade.#ctor(System.Int32)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Crossfade.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Crossfade.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Random">
            <summary>
            Executes "Random"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Random.SetRandom">
            <summary>
            Set random mode value
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Random.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Random.#ctor(System.Boolean)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Random.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Random.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Repeat">
            <summary>
            Executes "Repeat"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Repeat.SetRepeat">
            <summary>
            Set repeat value
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Repeat.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Repeat.#ctor(System.Boolean)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Repeat.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Repeat.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.SetVol">
            <summary>
            Executes "SetVol"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.SetVol.Volume">
            <summary>
            Volume value to SET
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.SetVol.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.SetVol.#ctor(System.Int32)">
            <summary>
            Creates a new instance
            </summary>
            <param name="volume">Between 0 and 100, out of range values throws an exception</param>
        </member>
        <member name="M:Simple.MPD.Commands.SetVol.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.SetVol.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Single">
            <summary>
            Executes "Single"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Single.State">
            <summary>
            State to set
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Single.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Single.#ctor(Simple.MPD.SingleStates)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Single.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Single.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Next">
            <summary>
            Executes "Next"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Next.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Next.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Next.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Pause">
            <summary>
            Executes "Pause"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Pause.PauseState">
            <summary>
            Pause state for the current command
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Pause.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Pause.#ctor(Simple.MPD.PauseState)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Pause.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Pause.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Play">
            <summary>
            Executes "Play" or "PlayId" commands
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Play.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Play.#ctor">
            <summary>
            Creates a new instance without arguments
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Play.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Play.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Play.PlaySongId(System.Int32)">
            <summary>
            Creates a new instance of "playid" command with SongId argument
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Play.PlaySongPosition(System.Int32)">
            <summary>
            Creates a new instance of "play" command with SongPos argument
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Previous">
            <summary>
            Executes "Find"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Previous.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Previous.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Previous.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Stop">
            <summary>
            Executes "Stop"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Stop.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Stop.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Stop.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.ListPlaylistInfo">
            <summary>
            Executes "Find"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.ListPlaylistInfo.Name">
            <summary>
            Playlist name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.ListPlaylistInfo.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.ListPlaylistInfo.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.ListPlaylistInfo.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.ListPlaylistInfo.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.ListPlaylists">
            <summary>
            Executes "ListPlaylists"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.ListPlaylists.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.ListPlaylists.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.ListPlaylists.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Load">
            <summary>
            Executes "Load"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Load.Name">
            <summary>
            Playlist name
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Load.Range">
            <summary>
            Optional name to be loaded
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Load.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Load.#ctor(System.String,Simple.MPD.Commands.Range)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Load.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Load.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.PlaylistDelete">
            <summary>
            Executes "PlaylistDelete"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.PlaylistDelete.Name">
            <summary>
            Playlist name
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.PlaylistDelete.SongPos">
            <summary>
            Song position to delete
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.PlaylistDelete.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.PlaylistDelete.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.PlaylistDelete.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.PlaylistDelete.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.PlaylistMove">
            <summary>
            Executes "PlaylistMove"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.PlaylistMove.Name">
            <summary>
            Playlist name
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.PlaylistMove.From">
            <summary>
            Original position
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.PlaylistMove.To">
            <summary>
            Mew position
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.PlaylistMove.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.PlaylistMove.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.PlaylistMove.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.PlaylistMove.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Rename">
            <summary>
            Executes "Rename"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Rename.OldName">
            <summary>
            Old (current) playlist name
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Rename.NewName">
            <summary>
            New playlist name
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Rename.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Rename.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Rename.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Rename.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Rm">
            <summary>
            Executes "Rm"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Rm.Name">
            <summary>
            Playlist name
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Rm.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Rm.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Rm.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Rm.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Save">
            <summary>
            Executes "Save"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Save.Name">
            <summary>
            Name of the playlist
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Save.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Save.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Save.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Save.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.CurrentSong">
            <summary>
            Executes "CurrentSong"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.CurrentSong.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.CurrentSong.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.CurrentSong.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Idle">
            <summary>
            Executes "Idle"
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Idle.SubSystems">
            <summary>
            Possible subsystems
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Database">
            <summary>
            the song database has been modified after update
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Update">
            <summary>
            a database update has started or finished. 
            If the database was modified during the update, the database event is also emitted.
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Stored_Playlist">
            <summary>
            a stored playlist has been modified, renamed, created or deleted
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Playlist">
            <summary>
            the queue (i.e. the current playlist) has been modified
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Player">
            <summary>
            the player has been started, stopped or seeked or tags of the currently playing song have changed (e.g. received from stream)
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Mixer">
            <summary>
            the volume has been changed
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Output">
            <summary>
            an audio output has been added, removed or modified (e.g. renamed, enabled or disabled)
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Options">
            <summary>
            options like repeat, random, crossfade, replay gain
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Partition">
            <summary>
            a partition was added, removed or changed
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Sticker">
            <summary>
            the sticker database has been modified.
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Subscription">
            <summary>
            a client has subscribed or unsubscribed to a channel
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Message">
            <summary>
            a message was received on a channel this client is subscribed to; this event is only emitted when the queue is empty
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Neighbor">
            <summary>
            a neighbor was found or lost
            </summary>
        </member>
        <member name="F:Simple.MPD.Commands.Idle.SubSystems.Mount">
            <summary>
            the mount list has changed
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Idle.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Idle.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Idle.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Stats">
            <summary>
            Executes "Stats"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Stats.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Stats.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Stats.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Status">
            <summary>
            Executes "Status"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Status.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Status.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Status.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Add">
            <summary>
            Executes "Find"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Add.Uri">
            <summary>
            Uri of the song
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Add.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Add.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Add.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Add.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.AddId">
            <summary>
            Executes "Find"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.AddId.Uri">
            <summary>
            File Uri to be added
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.AddId.Position">
            <summary>
            Position to be added to
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.AddId.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.AddId.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.AddId.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.AddId.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Clear">
            <summary>
            Executes "Clear"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Clear.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Clear.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Clear.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Delete">
            <summary>
            Executes "Delete"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Delete.Uri">
            <summary>
            Song uri
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Delete.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Delete.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Delete.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Delete.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.DeleteId">
            <summary>
            Executes "DeleteId"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.DeleteId.Id">
            <summary>
            Id of the song
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.DeleteId.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.DeleteId.#ctor(System.Int32)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.DeleteId.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.DeleteId.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Move">
            <summary>
            Executes "Move"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Move.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Move.Range">
            <summary>
            Range of songs
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Move.From">
            <summary>
            From song
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Move.ToPosition">
            <summary>
            To queue position
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Move.#ctor(Simple.MPD.Commands.Range,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Move.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Move.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Move.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.MoveId">
            <summary>
            Executes "MoveId"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.MoveId.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.MoveId.FromId">
            <summary>
            From song
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.MoveId.ToPosition">
            <summary>
            To song
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.MoveId.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.MoveId.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.MoveId.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.PlayListInfo">
            <summary>
            Executes "PlayListInfo"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.PlayListInfo.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.PlayListInfo.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.PlayListInfo.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Shuffle">
            <summary>
            Executes "Shuffle"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Shuffle.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Shuffle.Range">
            <summary>
            Optional range to shuffle
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Shuffle.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Shuffle.#ctor(Simple.MPD.Commands.Range)">
            <summary>
            Creates a new instance with range
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Shuffle.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Shuffle.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Swap">
            <summary>
            Executes "Swap"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Swap.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Swap.Pos1">
            <summary>
            First song position
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Swap.Pos2">
            <summary>
            Second song position
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Swap.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Swap.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Swap.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.SwapId">
            <summary>
            Executes "SwapId"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.SwapId.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.SwapId.Id1">
            <summary>
            First song position
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.SwapId.Id2">
            <summary>
            Second song position
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.SwapId.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.SwapId.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.SwapId.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Commands">
            <summary>
            Executes "Commands"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Commands.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Commands.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Commands.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Config">
            <summary>
            Executes "Find"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Config.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Config.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Config.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.Decoders">
            <summary>
            Executes "Decoders"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.Decoders.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Decoders.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.Decoders.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.NotCommands">
            <summary>
            Executes "NotCommands"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.NotCommands.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.NotCommands.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.NotCommands.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Commands.UrlHandlers">
            <summary>
            Executes "UrlHandlers"
            </summary>
        </member>
        <member name="P:Simple.MPD.Commands.UrlHandlers.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.UrlHandlers.GetResponseProcessor">
            <summary>
            Default Response processor
            </summary>
        </member>
        <member name="M:Simple.MPD.Commands.UrlHandlers.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes command to stream
            </summary>
        </member>
        <member name="T:Simple.MPD.SingleStates">
            <summary>
            States for the SINGLE command
            </summary>
        </member>
        <member name="F:Simple.MPD.SingleStates.On">
            <summary>
            Enables SINGLE mode
            </summary>
        </member>
        <member name="F:Simple.MPD.SingleStates.Off">
            <summary>
            Disables SINGLE mode
            </summary>
        </member>
        <member name="F:Simple.MPD.SingleStates.OneShot">
            <summary>
            Sets SINGLE to OneShot mode
            </summary>
        </member>
        <member name="T:Simple.MPD.PauseState">
            <summary>
            Pause states
            </summary>
        </member>
        <member name="F:Simple.MPD.PauseState.Pause">
            <summary>
            Pause playback
            </summary>
        </member>
        <member name="F:Simple.MPD.PauseState.Resume">
            <summary>
            Resume paused playback
            </summary>
        </member>
        <member name="F:Simple.MPD.PauseState.Toggle">
            <summary>
            Toogle playbakc pause state
            </summary>
        </member>
        <member name="T:Simple.MPD.PlaybackState">
            <summary>
            Playback state
            </summary>
        </member>
        <member name="F:Simple.MPD.PlaybackState.Play">
            <summary>
            Playback playing
            </summary>
        </member>
        <member name="F:Simple.MPD.PlaybackState.Pause">
            <summary>
            Playback paused
            </summary>
        </member>
        <member name="F:Simple.MPD.PlaybackState.Stop">
            <summary>
            Playback stopped
            </summary>
        </member>
        <member name="T:Simple.MPD.Tags">
            <summary>
            Available tags
            </summary>
        </member>
        <member name="T:Simple.MPD.FilterMatch">
            <summary>
            Filter match for 'find'-like Expressions
            </summary>
        </member>
        <member name="F:Simple.MPD.FilterMatch.Equals">
            <summary>
            Compiles to '=='
            </summary>
        </member>
        <member name="F:Simple.MPD.FilterMatch.Different">
            <summary>
            Compiles to '!='
            </summary>
        </member>
        <member name="F:Simple.MPD.FilterMatch.Contains">
            <summary>
            Compiles to 'contains'
            </summary>
        </member>
        <member name="T:Simple.MPD.Events.NotifyEventArgs">
            <summary>
            Notification event
            </summary>
        </member>
        <member name="P:Simple.MPD.Events.NotifyEventArgs.SystemsChanged">
            <summary>
            Gets changed subsystems
            </summary>
        </member>
        <member name="M:Simple.MPD.Events.NotifyEventArgs.#ctor(Simple.MPD.Commands.Idle.SubSystems[])">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="T:Simple.MPD.Events.SatusChangedEventArgs">
            <summary>
            Changed status event args
            </summary>
        </member>
        <member name="P:Simple.MPD.Events.SatusChangedEventArgs.Systems">
            <summary>
            Get subsystems
            </summary>
        </member>
        <member name="P:Simple.MPD.Events.SatusChangedEventArgs.Status">
            <summary>
            Get statuses
            </summary>
        </member>
        <member name="P:Simple.MPD.Events.SatusChangedEventArgs.CurrentSong">
            <summary>
            Gt current song
            </summary>
        </member>
        <member name="M:Simple.MPD.Events.SatusChangedEventArgs.#ctor(Simple.MPD.Commands.Idle.SubSystems[],Simple.MPD.Responses.Status,Simple.MPD.Responses.SongInfo)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="T:Simple.MPD.Exceptions.FailureException">
            <summary>
            MPD failure error
            </summary>
        </member>
        <member name="P:Simple.MPD.Exceptions.FailureException.Error">
            <summary>
            MPD error code
            </summary>
        </member>
        <member name="P:Simple.MPD.Exceptions.FailureException.CommandListNum">
            <summary>
            Command list num
            </summary>
        </member>
        <member name="P:Simple.MPD.Exceptions.FailureException.CurrentCommand">
            <summary>
            Current command
            </summary>
        </member>
        <member name="M:Simple.MPD.Exceptions.FailureException.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Exceptions.FailureException.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Exceptions.FailureException.FromResponseText(System.String)">
            <summary>
            Creates a new exception from text
            </summary>
        </member>
        <member name="T:Simple.MPD.Exceptions.IdleException">
            <summary>
            Idle exception class
            </summary>
        </member>
        <member name="M:Simple.MPD.Exceptions.IdleException.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="T:Simple.MPD.Exceptions.NotConnectedException">
            <summary>
            Not connected exception
            </summary>
        </member>
        <member name="T:Simple.MPD.Helper.EscapingHelper">
            <summary>
            Helper for scaping texts
            </summary>
        </member>
        <member name="M:Simple.MPD.Helper.EscapingHelper.Escape(System.String)">
            <summary>
            Scapes a text
            </summary>
        </member>
        <member name="T:Simple.MPD.Helper.MpdDirectory">
            <summary>
            Represents a directory structure in the MPD server
            </summary>
        </member>
        <member name="P:Simple.MPD.Helper.MpdDirectory.Name">
            <summary>
            Directory path
            </summary>
        </member>
        <member name="P:Simple.MPD.Helper.MpdDirectory.Directories">
            <summary>
            Mpd's sub-directories
            </summary>
        </member>
        <member name="P:Simple.MPD.Helper.MpdDirectory.Files">
            <summary>
            Directory's files
            </summary>
        </member>
        <member name="M:Simple.MPD.Helper.MpdDirectory.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:Simple.MPD.MpdExtension">
            <summary>
            MPD extenssions class
            </summary>
        </member>
        <member name="M:Simple.MPD.MpdExtension.ReadAll(Simple.MPD.MPD,System.Action{System.String})">
            <summary>
            Recursive and SLOW call
            </summary>
        </member>
        <member name="M:Simple.MPD.MpdExtension.ReadAll(Simple.MPD.MPD,System.String,System.Action{System.String})">
            <summary>
            Recursive and SLOW call
            </summary>
        </member>
        <member name="M:Simple.MPD.MpdExtension.AddLocalM3uFile(Simple.MPD.MPD,System.String,System.Func{System.String,System.String})">
            <summary>
            Rerads a Local m3u file with MPD music locations and adds to queue
            </summary>
            <param name="mpd">MPD instance</param>
            <param name="LocalFilePath">Local file, NOT MPD's path</param>
            <param name="pathConverter">Function to convert local path to remote path</param>
            <returns>Tup´le with MPD file added and it's SongID</returns>
        </member>
        <member name="T:Simple.MPD.Interfaces.ICommand">
            <summary>
            Command interface
            </summary>
        </member>
        <member name="P:Simple.MPD.Interfaces.ICommand.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="M:Simple.MPD.Interfaces.ICommand.WriteAsync(System.IO.StreamWriter)">
            <summary>
            Writes the command to stream
            </summary>
        </member>
        <member name="M:Simple.MPD.Interfaces.ICommand.GetResponseProcessor">
            <summary>
            Gets default response processor
            </summary>
        </member>
        <member name="T:Simple.MPD.Interfaces.IConnection">
            <summary>
            Connection interface
            </summary>
        </member>
        <member name="P:Simple.MPD.Interfaces.IConnection.IsConnected">
            <summary>
            Get if the connection is active
            </summary>
        </member>
        <member name="M:Simple.MPD.Interfaces.IConnection.OpenAsync">
            <summary>
            Opens the connection
            </summary>
        </member>
        <member name="M:Simple.MPD.Interfaces.IConnection.Open">
            <summary>
            Opens the connection
            </summary>
        </member>
        <member name="M:Simple.MPD.Interfaces.IConnection.Close">
            <summary>
            Closes the connection
            </summary>
        </member>
        <member name="M:Simple.MPD.Interfaces.IConnection.GetReader">
            <summary>
            Get reader stream
            </summary>
        </member>
        <member name="M:Simple.MPD.Interfaces.IConnection.GetWriter">
            <summary>
            Get writter stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Interfaces.IResponse">
            <summary>
            Response interface
            </summary>
        </member>
        <member name="M:Simple.MPD.Interfaces.IResponse.ReadAsync(System.IO.StreamReader)">
            <summary>
            Read response from stream
            </summary>
        </member>
        <member name="T:Simple.MPD.MPD">
            <summary>
            Music Protocol Deamon client
            </summary>
        </member>
        <member name="P:Simple.MPD.MPD.IsIdle">
            <summary>
            Reports if is in Idle.
            Do NOT send commands while in Idle
            </summary>
        </member>
        <member name="P:Simple.MPD.MPD.Connection">
            <summary>
            Gets current connection
            </summary>
        </member>
        <member name="P:Simple.MPD.MPD.ProtocolVersion">
            <summary>
            Current protocol version
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.#ctor(Simple.MPD.Interfaces.IConnection)">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.ExecuteCommandAsync(Simple.MPD.Interfaces.ICommand)">
            <summary>
            Executes a command in a concurrent-safe manmer
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.CloseConnection">
            <summary>
            Closes the scoket
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.DoPingAsync">
            <summary>
            Executes a Ping command
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetConfigAsync">
            <summary>
            Dumps configuration values that may be interesting for the client. 
            This command is only permitted to “local” clients (connected via local socket).
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetCommandsAsync">
            <summary>
            Shows which commands the current user has access to
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetNotCommandsAsync">
            <summary>
            Shows which commands the current user does not have access to
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetUrlHandlersAsync">
            <summary>
            Gets a list of available URL handlers
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetDecodersAsync">
            <summary>
            Print a list of decoder plugins, followed by their supported suffixes and MIME types
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetStatsAsync">
            <summary>
            Displays statistics
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetStatusAsync">
            <summary>
            Reports the current status of the player and the volume level
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetCurrentSongAsync">
            <summary>
            Displays the song info of the current song
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Idle(System.Threading.CancellationToken)">
            <summary>
            Waits until there is a noteworthy change in one or more of MPD’s subsystems. 
            As soon as there is one, it lists all changed systems in a line in the format `changed: SUBSYSTEM`
            Any command sent while in Idle wil raise an IdleException
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SetConsumeAsync(System.Boolean)">
            <summary>
            Sets consume state. When consume is activated, each song played is removed from playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SetCrossfadeAsync(System.Int32)">
            <summary>
            Sets crossfading between songs
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SetRandomAsync(System.Boolean)">
            <summary>
            Enables/disables Random
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SetRepeatAsync(System.Boolean)">
            <summary>
            Enable/Disable repeat
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SetSingle(Simple.MPD.SingleStates)">
            <summary>
            Sets single state, STATE should be On, Off or OneShot. 
            When single is activated, playback is stopped after current song, or song is repeated if the ‘repeat’ mode is enabled
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SetVolumeAsync(System.Int32)">
            <summary>
            Sets volume, the range of volume is 0-100. Out of range values will be truncated
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.PlayAsync">
            <summary>
            Begins playing the playlist at current song
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.PlaySongPosAsync(System.Int32)">
            <summary>
            Begins playing the playlist at song number SongPosition
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.PlaySongIdAsync(System.Int32)">
            <summary>
            Begins playing the playlist at song SongId
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.PauseAsync(Simple.MPD.PauseState)">
            <summary>
            Pause or resume playback
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.NextAsync">
            <summary>
            Plays next song in the playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.PreviousAsync">
            <summary>
            Plays previous song in the playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.StopAsync">
            <summary>
            Stops playing
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.GetQueue">
            <summary>
            Displays a list of all songs in the queue, internally uses the `playlistinfo` command
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.QueueClear">
            <summary>
            Clears the queue
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.QueueAdd(System.String)">
            <summary>
            Adds the file URI to the playlist (directories add recursively). URI can also be a single file.
            Clients that are connected via local socket may add arbitrary local files(URI is an absolute path)
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.QueueAddId(System.String,System.Int32)">
            <summary>
            Adds a song to the playlist (non-recursive) and returns the song id. URI is always a single file or URL
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.QueueDelete(System.String)">
            <summary>
            Deletes a song from the playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.QueueDeleteId(System.Int32)">
            <summary>
            Deletes the song SONGID from the playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Shuffle">
            <summary>
            Shuffles the queue
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Shuffle(Simple.MPD.Commands.Range)">
            <summary>
            Shuffles the queue
            </summary>
            <param name="range">Specifies the range to shuffle</param>
        </member>
        <member name="M:Simple.MPD.MPD.SwapPos(System.Int32,System.Int32)">
            <summary>
            Swaps the positions of pos1 and pos2
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SwapId(System.Int32,System.Int32)">
            <summary>
            Swaps the positions of id1 and id2
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.MoveRange(Simple.MPD.Commands.Range,System.Int32)">
            <summary>
            Move songs at range to specified position
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.MovePos(System.Int32,System.Int32)">
            <summary>
            Move song from to specified position
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.MoveId(System.Int32,System.Int32)">
            <summary>
            Move song with Id to specified position
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.ListPlaylists">
            <summary>
            Prints a list of the playlist directory
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.ListPlaylistInfo(System.String)">
            <summary>
            Lists the songs with metadata in the playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.RenamePlaylist(System.String,System.String)">
            <summary>
            Renames the playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.RemovePlaylist(System.String)">
            <summary>
            Removes the playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Load(System.String,Simple.MPD.Commands.Range)">
            <summary>
            Loads the playlist (or a range) into the current queue
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.SaveQueue(System.String)">
            <summary>
            Saves the queue as a playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.PlaylistDelete(System.String,System.Int32)">
            <summary>
            Deletes SONGPOS from the playlist
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.PlaylistMove(System.String,System.Int32,System.Int32)">
            <summary>
            Moves the song at position FROM to the position TO
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.ListAll">
            <summary>
            Do not use this command.
            Lists all songs and directories in URI.
            Do not manage a client-side copy of MPD’s database. 
            That is fragile and adds huge overhead. It will break with large databases. 
            Instead, query MPD whenever you need something.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simple.MPD.MPD.LsInfo(System.String)">
            <summary>
            Lists the contents of the directory URI
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Find(System.String)">
            <summary>
            Search the database for songs matching expression (case-sensitive)
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Find(Simple.MPD.Tags,Simple.MPD.FilterMatch,System.String)">
            <summary>
            Search the database for songs matching expression (case-sensitive)
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Search(System.String)">
            <summary>
            Search the database for songs matching expression (case-INsensitive)
            </summary>
        </member>
        <member name="M:Simple.MPD.MPD.Search(Simple.MPD.Tags,Simple.MPD.FilterMatch,System.String)">
            <summary>
            Search the database for songs matching expression (case-INsensitive)
            </summary>
        </member>
        <member name="T:Simple.MPD.MpdNotifier">
            <summary>
            Creates a MPD-Client connection and notifies events
            </summary>
        </member>
        <member name="E:Simple.MPD.MpdNotifier.NotifyEvent">
            <summary>
            Notify on SubSystems change
            </summary>
        </member>
        <member name="E:Simple.MPD.MpdNotifier.NotifyStatusChange">
            <summary>
            Notify on Player, Mixer or Options
            </summary>
        </member>
        <member name="M:Simple.MPD.MpdNotifier.#ctor(Simple.MPD.Interfaces.IConnection)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.MpdNotifier.Start">
            <summary>
            Starts notifier
            </summary>
        </member>
        <member name="M:Simple.MPD.MpdNotifier.Stop">
            <summary>
            Stops notifier
            </summary>
        </member>
        <member name="M:Simple.MPD.MpdNotifier.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="T:Simple.MPD.Netwroking.TcpConnection">
            <summary>
            Implements IConnection with TCP
            </summary>
        </member>
        <member name="P:Simple.MPD.Netwroking.TcpConnection.EndPoint">
            <summary>
            Gets the endpoint
            </summary>
        </member>
        <member name="P:Simple.MPD.Netwroking.TcpConnection.TcpClient">
            <summary>
            Gets TCP Client
            </summary>
        </member>
        <member name="P:Simple.MPD.Netwroking.TcpConnection.IsConnected">
            <summary>
            Gets if the connection is active
            </summary>
        </member>
        <member name="M:Simple.MPD.Netwroking.TcpConnection.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Netwroking.TcpConnection.#ctor(System.Net.IPEndPoint)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Simple.MPD.Netwroking.TcpConnection.TryConnectAsync">
            <summary>
            Tries to connect
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simple.MPD.Netwroking.TcpConnection.OpenAsync">
            <summary>
            Opens the connection
            </summary>
        </member>
        <member name="M:Simple.MPD.Netwroking.TcpConnection.Open">
            <summary>
            Opens the connection
            </summary>
        </member>
        <member name="M:Simple.MPD.Netwroking.TcpConnection.Close">
            <summary>
            Closes the connection
            </summary>
        </member>
        <member name="M:Simple.MPD.Netwroking.TcpConnection.GetReader">
            <summary>
            Get reader stream
            </summary>
        </member>
        <member name="M:Simple.MPD.Netwroking.TcpConnection.GetWriter">
            <summary>
            Get writter stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Responses.IdleResponse">
            <summary>
            Idle response
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.IdleResponse.SubSystems">
            <summary>
            Get subsystems
            </summary>
        </member>
        <member name="M:Simple.MPD.Responses.IdleResponse.ReadAsync(System.IO.StreamReader)">
            <summary>
            Read response from stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Responses.Ok">
            <summary>
            OK response
            </summary>
        </member>
        <member name="M:Simple.MPD.Responses.Ok.ReadAsync(System.IO.StreamReader)">
            <summary>
            Read response from stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Responses.SongInfo">
            <summary>
            Song info response
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.File">
            <summary>
            Underlying file, NULL for directories
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Directory">
            <summary>
            Directory name, NULL for files, playlists, etc
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.PlayList">
            <summary>
            Playlist file path, NULL for songs and directories
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Name">
            <summary>
            A name for this song. This is not the song title. The exact meaning of this tag is not well-defined in the standard
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Elapsed">
            <summary>
            Total time elapsed within the song
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Duration">
            <summary>
            Duration of the song
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.MUSICBRAINZ_ALBUMID">
            <summary>
            The album id in the MusicBrainz database
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.MUSICBRAINZ_ARTISTID">
            <summary>
            The artist id in the MusicBrainz database
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.MUSICBRAINZ_ALBUMARTISTID">
            <summary>
            The album artist id in the MusicBrainz database
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.MUSICBRAINZ_RELEASETRACKID">
            <summary>
            The release track id in the MusicBrainz database
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.MUSICBRAINZ_TRACKID">
            <summary>
            The track id in the MusicBrainz database
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Artist">
            <summary>
            The artist name
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.AlbumArtist">
            <summary>
            On multi-artist albums, this is the artist name which shall be used for the whole album
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.ArtistSort">
            <summary>
            Same as artist, but for sorting
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.AlbumArtistSort">
            <summary>
            Same as albumartist, but for sorting
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Title">
            <summary>
            The song title
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Album">
            <summary>
            The album name
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.AlbumSort">
            <summary>
            Same as album, but for sorting
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Genre">
            <summary>
            The music genre
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Track">
            <summary>
            The decimal track number within the album
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Composer">
            <summary>
            The artist who composed the song
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Performer">
            <summary>
            The artist who performed the song
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Conductor">
            <summary>
            The conductor who conducted the song
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.LastModified">
            <summary>
            the time stamp of the last modification of the underlying file
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Format">
            <summary>
            The audio format of the song (or an approximation to a format supported by MPD and the decoder plugin being used). 
            When playing this file, the audio value in the status response should be the same
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Format_SampleRate">
            <summary>
            Sample rate part of the Format
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Format_Bits">
            <summary>
            Bits part of the Format
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Format_Channels">
            <summary>
            Channels part of the Format
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Pos">
            <summary>
            Song position in the queue
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.Id">
            <summary>
            Song ID on the queue
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.DisplayArtist">
            <summary>
            Artist name for display
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfo.SongDisplayName">
            <summary>
            Song name for display
            {DisplayArtist} - {Title}
            </summary>
        </member>
        <member name="M:Simple.MPD.Responses.SongInfo.ReadAsync(System.IO.StreamReader)">
            <summary>
            Read a response from the stream
            </summary>
        </member>
        <member name="M:Simple.MPD.Responses.SongInfo.ReadAll(System.IO.StreamReader)">
            <summary>
            Get all song info from stream
            </summary>
        </member>
        <member name="M:Simple.MPD.Responses.SongInfo.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:Simple.MPD.Responses.SongInfoCollection">
            <summary>
            A collection of songs information
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.SongInfoCollection.Songs">
            <summary>
            All songs in the collection
            </summary>
        </member>
        <member name="M:Simple.MPD.Responses.SongInfoCollection.ReadAsync(System.IO.StreamReader)">
            <summary>
            Read response from stream
            </summary>
        </member>
        <member name="M:Simple.MPD.Responses.SongInfoCollection.GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
        </member>
        <member name="T:Simple.MPD.Responses.Stats">
            <summary>
            Stats response
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.Uptime">
            <summary>
            daemon uptime in seconds
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.PlayTime">
            <summary>
            time length of music played
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.Artists">
            <summary>
            number of artists
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.Albums">
            <summary>
            number of albums
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.Songs">
            <summary>
            number of songs
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.DB_PlayTime">
            <summary>
            sum of all song times in the database in seconds
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Stats.DB_Update">
            <summary>
            last db update
            </summary>
        </member>
        <member name="M:Simple.MPD.Responses.Stats.ReadAsync(System.IO.StreamReader)">
            <summary>
            Read response from stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Responses.Status">
            <summary>
            Reports the current status of the player and the volume level
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.Partition">
            <summary>
            the name of the current partition
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.Volume">
            <summary>
            Volume in the range 0-100
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.Repeat">
            <summary>
            If repeat is enabled
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.Random">
            <summary>
            If random is enabled
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.Single">
            <summary>
            Current 'Single' status
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.Consume">
            <summary>
            If consume mode is enabled
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.Playlist">
            <summary>
            Playlist (queue) version number
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.PlaylistLength">
            <summary>
            The length of the playlist (queue)
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.State">
            <summary>
            Current playback state
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.Song">
            <summary>
            Playlist (queue) song number of the current song stopped on or playing
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.SongId">
            <summary>
            Playlist (queue) songid of the current song stopped on or playing
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.NextSong">
            <summary>
            Playlist (queue) song number of the next song to be played
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.NextSongId">
            <summary>
            Playlist (queue) songid of the next song to be played
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.Elapsed">
            <summary>
            Total time elapsed of the current (playing/paused) song
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.Duration">
            <summary>
            Duration of the current song
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.Bitrate">
            <summary>
            instantaneous bitrate in kbps
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.XFade">
            <summary>
            Crissfade in seconds
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.MixRampDB">
            <summary>
            Mix ramp threshold in dB
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.MixRampDelay">
            <summary>
            Mix ramp delay in seconds
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.AudioFormat">
            <summary>
            The format emitted by the decoder plugin during playback, format: samplerate:bits:channels.
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.Updating_DB">
            <summary>
            DB updating job id
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Status.ErrorMessage">
            <summary>
            If there is an error, returns message here
            </summary>
        </member>
        <member name="M:Simple.MPD.Responses.Status.ReadAsync(System.IO.StreamReader)">
            <summary>
            Read a response from the stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Responses.StringArray">
            <summary>
            String collection response
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.StringArray.Items">
            <summary>
            Get response items
            </summary>
        </member>
        <member name="M:Simple.MPD.Responses.StringArray.ReadAsync(System.IO.StreamReader)">
            <summary>
            Read response from stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Responses.ValuesList">
            <summary>
            OK response
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.ValuesList.Items">
            <summary>
            Get response items pairs
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.ValuesList.Item(System.String)">
            <summary>
            Get response items
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.ValuesList.Item(System.Int32)">
            <summary>
            Get response items
            </summary>
        </member>
        <member name="M:Simple.MPD.Responses.ValuesList.ReadAsync(System.IO.StreamReader)">
            <summary>
            Read response from stream
            </summary>
        </member>
        <member name="T:Simple.MPD.Responses.Version">
            <summary>
            Version response
            </summary>
        </member>
        <member name="P:Simple.MPD.Responses.Version.VersionInfo">
            <summary>
            Protocol version info
            </summary>
        </member>
        <member name="M:Simple.MPD.Responses.Version.ReadAsync(System.IO.StreamReader)">
            <summary>
            Read response from stream
            </summary>
        </member>
    </members>
</doc>
